name: Main CI /CD pipeline

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}

    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          useConfigFile: true

      - name: print version changes
        run: |
          echo "candidate version - v${{ steps.gitversion.outputs.semVer }}"

  run-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      pull-requests: write

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      - name: Run test
        run: dotnet test *.sln

  run-sonar:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      pull-requests: write

    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze with SonarCloud
        uses: highbyte/sonarscan-dotnet@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
        with:
          sonarOrganization: valentk777
          sonarProjectKey: valentk777_Task-DiscountCodes
          sonarProjectName: Task-DiscountCodes
          dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
        timeout-minutes: 1
        with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt

  pack-and-release-be:
    runs-on: ubuntu-latest
    needs: ["get-version", "run-tests", "run-sonar"]
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: 🛒 Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/valentk777/discount-codes-api

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: "."
          push: true
          tags: ghcr.io/valentk777/discount-codes-api:${{ needs.get-version.outputs.semVer }}
          labels: ${{ steps.meta.outputs.labels }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            GITHUB_NUGET_PASSWORD=${{ secrets.GITHUB_TOKEN }}

  pack-and-release-fe:
    runs-on: ubuntu-latest
    needs: ["get-version", "run-tests", "run-sonar"]
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: 🛒 Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/valentk777/discount-codes-web

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: "./UI"
          push: true
          tags: ghcr.io/valentk777/discount-codes-web:${{ needs.get-version.outputs.semVer }}
          labels: ${{ steps.meta.outputs.labels }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            GITHUB_NUGET_PASSWORD=${{ secrets.GITHUB_TOKEN }}

  tag-and-release:
    runs-on: ubuntu-latest
    needs:
      [
        "get-version",
        "run-tests",
        "run-sonar",
        "pack-and-release-be",
        "pack-and-release-fe",
      ]

    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Create tag and release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.get-version.outputs.semVer }}
          release_name: v${{ needs.get-version.outputs.semVer }}
          prerelease: false
